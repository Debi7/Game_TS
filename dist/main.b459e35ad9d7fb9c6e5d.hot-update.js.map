{"version":3,"file":"main.b459e35ad9d7fb9c6e5d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8E;AAC1C;AACK;AACzC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,+BAA+B;AAC/B;AACA,iCAAiC;AACjC;AACA,sCAAsC;AACtC;AACA,gCAAgC;AAChC;AACA,iCAAiC,YAAY;AAC7C;AACA,sCAAsC,YAAY;AAClD;AACA;AACA,kBAAkB,oDAAa;AAC/B;AACO,mCAAmC,OAAO,iDAAU;AAC3D;AACO;AACP;AACA,aAAa,+CAAQ;AACrB,aAAa,+CAAQ;AACrB,aAAa,+CAAQ;AACrB,aAAa,+CAAQ;AACrB,aAAa,+CAAQ;AACrB,aAAa,+CAAQ;AACrB;AACA,aAAa,+CAAQ;AACrB;AACA,0DAA0D,2BAA2B,4BAA4B;AACjH;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAO,CAAC,8CAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,KAAK;AACL,YAAY,0DAAmB,yBAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;;;;;;;;UCtGA","sources":["webpack://game_ts/./src/contexts/GameContext.tsx","webpack://game_ts/webpack/runtime/getFullHash"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport _sample from \"lodash/sample\";\nimport quotes from \"../data/quotes.json\";\n// Значения по умолчанию для контекста\nvar defaultContextValues = {\n    start: undefined,\n    setStart: function () { },\n    victory: 0,\n    setVictory: function () { },\n    exception: \"\",\n    setException: function () { },\n    initialCounter: 0,\n    setInitialCounter: function () { },\n    isPaused: false,\n    togglePause: function () { },\n    quote: \"\",\n    generateQuote: function () { return \"\"; },\n    quoteLetters: \"\",\n    returnQuoteLetters: function () { return \"\"; },\n};\n// Создание контекста\nvar GameContext = createContext(defaultContextValues);\n// Хук для использования контекста\nexport var useGameContext = function () { return useContext(GameContext); };\n// Провайдер контекста\nexport var GameProvider = function (_a) {\n    var children = _a.children;\n    var _b = useState(undefined), start = _b[0], setStart = _b[1];\n    var _c = useState(0), victory = _c[0], setVictory = _c[1];\n    var _d = useState(\"\"), exception = _d[0], setException = _d[1];\n    var _e = useState(false), isPaused = _e[0], setIsPaused = _e[1];\n    var _f = useState(\"\"), quote = _f[0], setQuote = _f[1];\n    var _g = useState(\"\"), quoteLetters = _g[0], setQuoteLetters = _g[1];\n    var timerStart = Math.floor(quoteLetters.length / 2);\n    var _h = useState(timerStart), initialCounter = _h[0], setInitialCounter = _h[1];\n    // Обновляем defaultContextValues с использованием текущего timerStart\n    var updatedDefaultContextValues = __assign(__assign({}, defaultContextValues), { initialCounter: timerStart });\n    // Функция для переключения паузы\n    var togglePause = function () {\n        setIsPaused(!isPaused);\n    };\n    // Функция для генерации случайной цитаты\n    var generateQuote = function () {\n        var randomQuote = _sample(quotes);\n        return randomQuote || \"\";\n    };\n    // Функция для возвращения букв цитаты без пробелов и подчеркиваний\n    var returnQuoteLetters = function (quote) {\n        return quote.replace(/\\s/g, \"\").split(\"_\").join(\"\");\n    };\n    // Эффект для генерации цитаты при старте игры\n    useEffect(function () {\n        if (start) {\n            var newQuote = generateQuote();\n            setQuote(newQuote);\n            setQuoteLetters(returnQuoteLetters(newQuote));\n        }\n    }, [start]);\n    // нажатие клавиш\n    useEffect(function () {\n        var keyDownHandler = function (event) {\n            var key = event.key;\n            var underscore = \"_\";\n            var space = \" \";\n            console.log(\"Key pressed: \".concat(key)); // Логирование нажатия клавиши\n            if (key !== underscore && key !== space) {\n                console.log(\"Replacing \".concat(key, \" with \").concat(underscore)); // Логирование замены символа\n                setException(exception.replace(key, underscore));\n                // setException((prevException) => prevException.replace(key, underscore));\n            }\n        };\n        window.addEventListener(\"keydown\", keyDownHandler, false);\n        return function () { return window.removeEventListener(\"keydown\", keyDownHandler, false); };\n    }, []);\n    return (React.createElement(GameContext.Provider, { value: {\n            start: start,\n            setStart: setStart,\n            victory: victory,\n            setVictory: setVictory,\n            exception: exception,\n            setException: setException,\n            initialCounter: initialCounter,\n            setInitialCounter: setInitialCounter,\n            isPaused: isPaused,\n            togglePause: togglePause,\n            quote: quote,\n            generateQuote: generateQuote,\n            quoteLetters: quoteLetters,\n            returnQuoteLetters: returnQuoteLetters,\n            updatedDefaultContextValues: updatedDefaultContextValues,\n        } }, children));\n};\n","__webpack_require__.h = () => (\"43592b9269d1e9743ad6\")"],"names":[],"sourceRoot":""}